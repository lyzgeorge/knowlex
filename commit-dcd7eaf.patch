commit dcd7eaf98608b1c53d9b10dab15b0d5c15ef3e36
Author: George Liu <lygeorge@gmail.com>
Date:   Mon Aug 25 10:14:49 2025 +0800

    feature: project incomplete with chatinputbox problems

diff --git a/src/main/database/queries.ts b/src/main/database/queries.ts
index 9658256..059682f 100644
--- a/src/main/database/queries.ts
+++ b/src/main/database/queries.ts
@@ -1,7 +1,8 @@
 import { executeQuery } from './index'
 import type { Conversation } from '@shared/types/conversation'
 import type { Message, MessageContent } from '@shared/types/message'
-import { conversationEntity, messageEntity } from './schemas'
+import { conversationEntity, messageEntity, projectEntity } from './schemas'
+import type { Project } from '@shared/types/project'
 
 /**
  * Optimized database queries using generic CRUD utilities
@@ -63,7 +64,7 @@ export async function listConversations(limit?: number, offset?: number): Promis
 
 export async function updateConversation(
   id: string,
-  updates: Partial<Pick<Conversation, 'title' | 'settings'>>
+  updates: Partial<Pick<Conversation, 'title' | 'settings' | 'projectId'>>
 ): Promise<void> {
   await conversationEntity.update(id, updates)
 }
@@ -111,6 +112,41 @@ export async function deleteMessage(id: string): Promise<void> {
   await messageEntity.delete(id)
 }
 
+// ============================================================================
+// Project Queries (Using Generic CRUD)
+// ============================================================================
+
+export async function createProject(project: Project): Promise<void> {
+  await projectEntity.create(project)
+}
+
+export async function getProject(id: string): Promise<Project | null> {
+  return await projectEntity.get(id)
+}
+
+export async function listProjects(): Promise<Project[]> {
+  return await projectEntity.list({ orderBy: 'created_at', direction: 'DESC' })
+}
+
+export async function updateProject(
+  id: string,
+  updates: Partial<Pick<Project, 'name'>>
+): Promise<void> {
+  await projectEntity.update(id, updates)
+}
+
+export async function deleteProject(id: string): Promise<void> {
+  await projectEntity.delete(id)
+}
+
+export async function listConversationsByProject(projectId: string): Promise<Conversation[]> {
+  return await conversationEntity.list({
+    where: { column: 'project_id', value: projectId },
+    orderBy: 'updated_at',
+    direction: 'DESC'
+  })
+}
+
 // ============================================================================
 // Search Queries (Custom FTS - Cannot use generic CRUD)
 // ============================================================================
diff --git a/src/main/database/schemas.ts b/src/main/database/schemas.ts
index fa67047..e71255c 100644
--- a/src/main/database/schemas.ts
+++ b/src/main/database/schemas.ts
@@ -4,6 +4,7 @@
  */
 
 import type { Conversation } from '@shared/types/conversation'
+import type { Project } from '@shared/types/project'
 import type { Message } from '@shared/types/message'
 import { DatabaseEntity, type EntitySchema, createFieldMapping } from './entity'
 
@@ -19,6 +20,11 @@ export const conversationSchema: EntitySchema<Conversation> = {
   },
   fields: [
     createFieldMapping('id', 'id'),
+    // Nullable foreign key to projects
+    createFieldMapping('projectId', 'project_id', {
+      required: false,
+      updatable: true
+    }),
     createFieldMapping('title', 'title'),
     createFieldMapping('createdAt', 'created_at'),
     createFieldMapping('updatedAt', 'updated_at'),
@@ -66,3 +72,23 @@ export const messageSchema: EntitySchema<Message> = {
  */
 export const conversationEntity = new DatabaseEntity<Conversation>(conversationSchema)
 export const messageEntity = new DatabaseEntity<Message>(messageSchema)
+
+/**
+ * Project entity schema
+ */
+export const projectSchema: EntitySchema<Project> = {
+  tableName: 'projects',
+  primaryKey: 'id',
+  defaultOrder: {
+    column: 'created_at',
+    direction: 'DESC'
+  },
+  fields: [
+    createFieldMapping('id', 'id'),
+    createFieldMapping('name', 'name'),
+    createFieldMapping('createdAt', 'created_at'),
+    createFieldMapping('updatedAt', 'updated_at')
+  ]
+}
+
+export const projectEntity = new DatabaseEntity<Project>(projectSchema)
diff --git a/src/main/ipc/conversation.ts b/src/main/ipc/conversation.ts
index 96ede62..f3f0c57 100644
--- a/src/main/ipc/conversation.ts
+++ b/src/main/ipc/conversation.ts
@@ -94,6 +94,9 @@ export function registerConversationIPCHandlers(): void {
 
         const createData: CreateConversationData = {}
         if (requestData.title !== undefined) createData.title = requestData.title
+        // Allow optional projectId passthrough if provided during creation
+        if ((requestData as any).projectId !== undefined)
+          (createData as any).projectId = (requestData as any).projectId
 
         return await createConversation(createData)
       })
@@ -228,6 +231,20 @@ export function registerConversationIPCHandlers(): void {
     }
   )
 
+  // Move conversation to project (or remove by null)
+  ipcMain.handle(
+    'conversation:move',
+    async (_, conversationId: unknown, projectId: unknown): Promise<IPCResult<boolean>> => {
+      return handleIPCCall(async () => {
+        const validConversationId = requireValidId(conversationId, 'Conversation ID')
+        const targetProjectId = projectId === null ? null : String(projectId)
+        const { moveConversation } = await import('@main/services/conversation')
+        await moveConversation(validConversationId, targetProjectId)
+        return true
+      })
+    }
+  )
+
   // ============================================================================
   // Message Handlers
   // ============================================================================
@@ -344,11 +361,17 @@ export function registerConversationIPCHandlers(): void {
           ? request.parentMessageId.trim()
           : undefined
 
+      const projectIdForNew: string | undefined =
+        typeof request.projectId === 'string' && request.projectId.trim().length > 0
+          ? request.projectId.trim()
+          : undefined
+
       // Determine conversation - create if needed
       let actualConversationId = providedConversationId
       if (!actualConversationId) {
         const newConv = await createConversation({
-          title: 'New Chat'
+          title: 'New Chat',
+          projectId: projectIdForNew ?? null
         })
         actualConversationId = newConv.id
 
diff --git a/src/main/ipc/project.ts b/src/main/ipc/project.ts
new file mode 100644
index 0000000..0cf7e83
--- /dev/null
+++ b/src/main/ipc/project.ts
@@ -0,0 +1,80 @@
+import { ipcMain } from 'electron'
+import type { IPCResult } from '@shared/types/ipc'
+import type { Project } from '@shared/types/project'
+import {
+  createProject,
+  getProjectById,
+  getAllProjects,
+  updateProjectById,
+  deleteProjectById,
+  getProjectConversations
+} from '@main/services/project-service'
+import { handleIPCCall, requireValidId } from './common'
+
+export function registerProjectIPCHandlers(): void {
+  console.log('Registering project IPC handlers...')
+
+  ipcMain.handle('project:create', async (_, name: unknown): Promise<IPCResult<Project>> => {
+    return handleIPCCall(async () => {
+      if (!name || typeof name !== 'string') throw new Error('Invalid project name')
+      return await createProject({ name })
+    })
+  })
+
+  ipcMain.handle('project:list', async (): Promise<IPCResult<Project[]>> => {
+    return handleIPCCall(async () => {
+      return await getAllProjects()
+    })
+  })
+
+  ipcMain.handle('project:get', async (_, id: unknown): Promise<IPCResult<Project | null>> => {
+    return handleIPCCall(async () => {
+      const pid = requireValidId(id, 'Project ID')
+      return await getProjectById(pid)
+    })
+  })
+
+  ipcMain.handle(
+    'project:update',
+    async (_, id: unknown, updates: unknown): Promise<IPCResult<Project>> => {
+      return handleIPCCall(async () => {
+        const pid = requireValidId(id, 'Project ID')
+        if (!updates || typeof updates !== 'object') throw new Error('Invalid update data')
+        const u = updates as { name?: string }
+        const updateData: { name?: string } = {}
+        if (u.name !== undefined) {
+          updateData.name = u.name
+        }
+        return await updateProjectById(pid, updateData)
+      })
+    }
+  )
+
+  ipcMain.handle('project:delete', async (_, id: unknown): Promise<IPCResult<void>> => {
+    return handleIPCCall(async () => {
+      const pid = requireValidId(id, 'Project ID')
+      await deleteProjectById(pid)
+    })
+  })
+
+  ipcMain.handle('project:conversations', async (_, id: unknown): Promise<IPCResult<any[]>> => {
+    return handleIPCCall(async () => {
+      const pid = requireValidId(id, 'Project ID')
+      return await getProjectConversations(pid)
+    })
+  })
+
+  console.log('Project IPC handlers registered successfully')
+}
+
+export function unregisterProjectIPCHandlers(): void {
+  const channels = [
+    'project:create',
+    'project:list',
+    'project:get',
+    'project:update',
+    'project:delete',
+    'project:conversations'
+  ]
+  channels.forEach((c) => ipcMain.removeAllListeners(c))
+}
diff --git a/src/main/main.ts b/src/main/main.ts
index f078b95..f250ce4 100644
--- a/src/main/main.ts
+++ b/src/main/main.ts
@@ -9,6 +9,7 @@ import {
   registerConversationIPCHandlers,
   unregisterConversationIPCHandlers
 } from './ipc/conversation'
+import { registerProjectIPCHandlers, unregisterProjectIPCHandlers } from './ipc/project'
 import { registerFileIPCHandlers, unregisterFileIPCHandlers } from './ipc/file'
 import { registerSettingsIPCHandlers, unregisterSettingsIPCHandlers } from './ipc/settings'
 import { cancellationManager } from '@main/utils/cancellation'
@@ -39,6 +40,7 @@ class Application {
     try {
       console.log('Registering IPC handlers...')
       registerConversationIPCHandlers()
+      registerProjectIPCHandlers()
       registerFileIPCHandlers()
       registerSettingsIPCHandlers()
       console.log('IPC handlers registered successfully')
@@ -114,6 +116,7 @@ app.on('before-quit', async () => {
 
     // Unregister IPC handlers
     unregisterConversationIPCHandlers()
+    unregisterProjectIPCHandlers()
     unregisterFileIPCHandlers()
     unregisterSettingsIPCHandlers()
 
diff --git a/src/main/preload.ts b/src/main/preload.ts
index 91cc6fd..4042cef 100644
--- a/src/main/preload.ts
+++ b/src/main/preload.ts
@@ -38,6 +38,7 @@ export interface KnowlexAPI {
     updateSettings: (conversationId: string, settings: any) => Promise<IPCResult>
     generateTitle: (conversationId: string) => Promise<IPCResult>
     delete: (id: string) => Promise<IPCResult>
+    move: (conversationId: string, projectId: string | null) => Promise<IPCResult>
   }
 
   // Message IPC
@@ -55,6 +56,16 @@ export interface KnowlexAPI {
     edit: (messageId: string, content: any) => Promise<IPCResult>
   }
 
+  // Project IPC
+  project: {
+    create: (name: string) => Promise<IPCResult>
+    list: () => Promise<IPCResult>
+    get: (id: string) => Promise<IPCResult>
+    update: (id: string, updates: { name?: string }) => Promise<IPCResult>
+    delete: (id: string) => Promise<IPCResult>
+    conversations: (id: string) => Promise<IPCResult>
+  }
+
   // File IPC
   file: {
     processTemp: (data: TemporaryFileRequest) => Promise<IPCResult>
@@ -142,7 +153,9 @@ const knowlexAPI: KnowlexAPI = {
       ipcRenderer.invoke('conversation:update-settings', conversationId, settings),
     generateTitle: (conversationId) =>
       ipcRenderer.invoke('conversation:generate-title', conversationId),
-    delete: (id) => ipcRenderer.invoke('conversation:delete', id)
+    delete: (id) => ipcRenderer.invoke('conversation:delete', id),
+    move: (conversationId, projectId) =>
+      ipcRenderer.invoke('conversation:move', conversationId, projectId)
   },
 
   // Message IPC
@@ -156,6 +169,16 @@ const knowlexAPI: KnowlexAPI = {
     edit: (messageId, content) => ipcRenderer.invoke('message:edit', messageId, content)
   },
 
+  // Project IPC
+  project: {
+    create: (name) => ipcRenderer.invoke('project:create', name),
+    list: () => ipcRenderer.invoke('project:list'),
+    get: (id) => ipcRenderer.invoke('project:get', id),
+    update: (id, updates) => ipcRenderer.invoke('project:update', id, updates),
+    delete: (id) => ipcRenderer.invoke('project:delete', id),
+    conversations: (id) => ipcRenderer.invoke('project:conversations', id)
+  },
+
   // File IPC
   file: {
     processTemp: (data) => ipcRenderer.invoke('file:process-temp', data),
diff --git a/src/main/services/conversation.ts b/src/main/services/conversation.ts
index 8b4b8a3..53eb03c 100644
--- a/src/main/services/conversation.ts
+++ b/src/main/services/conversation.ts
@@ -17,11 +17,13 @@ import type { Conversation, SessionSettings } from '@shared/types/conversation'
 export interface CreateConversationData {
   title?: string
   settings?: SessionSettings
+  projectId?: string | null
 }
 
 export interface UpdateConversationData {
   title?: string
   settings?: SessionSettings
+  projectId?: string | null
 }
 
 /**
@@ -41,7 +43,8 @@ export async function createConversation(data: CreateConversationData): Promise<
     id: conversationId,
     title: data.title?.trim() || 'New Chat',
     createdAt: now,
-    updatedAt: now
+    updatedAt: now,
+    projectId: data.projectId ?? null
   }
 
   if (data.settings) {
@@ -153,13 +156,16 @@ export async function updateConversation(
   }
 
   // Prepare update data
-  const updates: Partial<Pick<Conversation, 'title' | 'settings'>> = {}
+  const updates: Partial<Pick<Conversation, 'title' | 'settings' | 'projectId'>> = {}
   if (data.title !== undefined) {
     updates.title = data.title.trim()
   }
   if (data.settings !== undefined) {
     updates.settings = data.settings
   }
+  if (data.projectId !== undefined) {
+    updates.projectId = data.projectId
+  }
 
   // Only proceed if there are actual changes
   if (Object.keys(updates).length === 0) {
@@ -240,3 +246,20 @@ export async function generateConversationTitle(id: string): Promise<string> {
     return 'New Chat'
   }
 }
+
+/**
+ * Moves a conversation to a project (or uncategorized when projectId is null)
+ */
+export async function moveConversation(
+  conversationId: string,
+  projectId: string | null
+): Promise<void> {
+  if (!conversationId || !conversationId.trim()) {
+    throw new Error('Conversation ID is required')
+  }
+  // Ensure conversation exists
+  const existing = await dbGetConversation(conversationId.trim())
+  if (!existing) throw new Error('Conversation not found')
+
+  await dbUpdateConversation(conversationId.trim(), { projectId })
+}
diff --git a/src/main/services/project-service.ts b/src/main/services/project-service.ts
new file mode 100644
index 0000000..00d6fe0
--- /dev/null
+++ b/src/main/services/project-service.ts
@@ -0,0 +1,103 @@
+import {
+  createProject as dbCreateProject,
+  getProject as dbGetProject,
+  listProjects as dbListProjects,
+  updateProject as dbUpdateProject,
+  deleteProject as dbDeleteProject,
+  listConversationsByProject as dbListConversationsByProject
+} from '@main/database/queries'
+import type { Project } from '@shared/types/project'
+import { generateId } from '@shared/utils/id'
+
+export interface CreateProjectData {
+  name: string
+}
+
+export interface UpdateProjectData {
+  name?: string
+}
+
+export async function createProject(data: CreateProjectData): Promise<Project> {
+  const name = (data.name || '').trim()
+  if (!name) throw new Error('Project name is required')
+  if (name.length > 100) throw new Error('Project name must be 100 characters or less')
+
+  // Enforce unique name (case-insensitive)
+  const existing = await dbListProjects()
+  if (existing.some((p) => p.name.toLowerCase() === name.toLowerCase())) {
+    throw new Error('A project with this name already exists')
+  }
+
+  const now = new Date().toISOString()
+  const project: Project = {
+    id: generateId(),
+    name,
+    createdAt: now,
+    updatedAt: now
+  }
+  await dbCreateProject(project)
+  return project
+}
+
+export async function getProjectById(id: string): Promise<Project | null> {
+  if (!id || !id.trim()) throw new Error('Project ID is required')
+  return await dbGetProject(id.trim())
+}
+
+export async function getAllProjects(): Promise<Project[]> {
+  return await dbListProjects()
+}
+
+export async function updateProjectById(id: string, updates: UpdateProjectData): Promise<Project> {
+  if (!id || !id.trim()) throw new Error('Project ID is required')
+  const existing = await dbGetProject(id.trim())
+  if (!existing) throw new Error('Project not found')
+  const name = updates.name?.trim()
+  if (name !== undefined) {
+    if (!name) throw new Error('Project name cannot be empty')
+    if (name.length > 100) throw new Error('Project name must be 100 characters or less')
+  }
+  // Enforce unique name if changed
+  if (name && name.toLowerCase() !== existing.name.toLowerCase()) {
+    const all = await dbListProjects()
+    if (all.some((p) => p.id !== id && p.name.toLowerCase() === name.toLowerCase())) {
+      throw new Error('A project with this name already exists')
+    }
+  }
+
+  const updateData: { name?: string } = {}
+  if (name !== undefined) {
+    updateData.name = name
+  }
+  await dbUpdateProject(id.trim(), updateData)
+  const updated = await dbGetProject(id.trim())
+  if (!updated) throw new Error('Failed to retrieve updated project')
+  return updated
+}
+
+/**
+ * Deletes a project and all its conversations as per PRD.
+ * Since DB FK uses SET NULL, enforce cascading via transaction here.
+ */
+export async function deleteProjectById(id: string): Promise<void> {
+  if (!id || !id.trim()) throw new Error('Project ID is required')
+  const proj = await dbGetProject(id.trim())
+  if (!proj) throw new Error('Project not found')
+
+  // Enforce deletion of all conversations in this project
+  const convs = await dbListConversationsByProject(id.trim())
+  // Since we don't have direct deleteConversationsByProject, manually set to null or delete one by one via IPC in services is overkill here.
+  // Follow PRD strictly: remove conversations by setting projectId to null is not acceptable. We'll delete one by one.
+  for (const c of convs) {
+    // Soft dependency: use conversation DB delete via import to avoid circular dep; do dynamic import.
+    const { deleteConversation } = (await import('@main/database/queries')) as any
+    await deleteConversation(c.id)
+  }
+
+  await dbDeleteProject(id.trim())
+}
+
+export async function getProjectConversations(projectId: string) {
+  if (!projectId || !projectId.trim()) throw new Error('Project ID is required')
+  return await dbListConversationsByProject(projectId.trim())
+}
diff --git a/src/renderer/components/features/chat/ChatInputBox.tsx b/src/renderer/components/features/chat/ChatInputBox.tsx
index cd8190c..f2acfd9 100644
--- a/src/renderer/components/features/chat/ChatInputBox.tsx
+++ b/src/renderer/components/features/chat/ChatInputBox.tsx
@@ -30,11 +30,13 @@ const spinAnimation = keyframes`
   to { transform: rotate(360deg); }
 `
 
-export type ChatInputVariant = 'main-entrance' | 'conversation'
+export type ChatInputVariant = 'main-entrance' | 'conversation' | 'project-entrance'
 
 export interface ChatInputBoxProps {
   /** Input variant determines styling and behavior */
   variant?: ChatInputVariant
+  /** Optional project context for creating new conversations */
+  projectId?: string
   /** Whether the input is disabled */
   disabled?: boolean
   /** Custom placeholder text (overrides variant defaults) */
@@ -58,6 +60,7 @@ export interface ChatInputBoxProps {
  */
 export const ChatInputBox: React.FC<ChatInputBoxProps> = ({
   variant = 'conversation',
+  projectId,
   disabled = false,
   placeholder,
   showFileAttachment = true,
@@ -154,6 +157,8 @@ export const ChatInputBox: React.FC<ChatInputBoxProps> = ({
     switch (variant) {
       case 'main-entrance':
         return 'Type your message...'
+      case 'project-entrance':
+        return 'Start a conversation in this project...'
       case 'conversation':
         return 'Type your message...'
       default:
@@ -264,9 +269,12 @@ export const ChatInputBox: React.FC<ChatInputBoxProps> = ({
         .reverse()
         .find((msg) => msg.role === 'assistant')
 
-      const sendOptions: { conversationId?: string; parentMessageId?: string } = {}
+      const sendOptions: { conversationId?: string; parentMessageId?: string; projectId?: string } =
+        {}
       if (currentConversation?.id) {
         sendOptions.conversationId = currentConversation.id
+      } else if (variant === 'project-entrance' && projectId) {
+        sendOptions.projectId = projectId
       }
       if (lastAssistantMessage?.id) {
         sendOptions.parentMessageId = lastAssistantMessage.id
@@ -297,7 +305,8 @@ export const ChatInputBox: React.FC<ChatInputBoxProps> = ({
     buildMessageContent,
     currentConversation,
     filteredMessages,
-    variant
+    variant,
+    projectId
   ])
 
   // Handle keyboard shortcuts
diff --git a/src/renderer/components/features/projects/ConversationCard.tsx b/src/renderer/components/features/projects/ConversationCard.tsx
new file mode 100644
index 0000000..91b94ff
--- /dev/null
+++ b/src/renderer/components/features/projects/ConversationCard.tsx
@@ -0,0 +1,54 @@
+import React from 'react'
+import { Box, HStack, Text, IconButton } from '@chakra-ui/react'
+import { HamburgerIcon } from '@chakra-ui/icons'
+import type { Conversation } from '@shared/types/conversation'
+import { formatRelativeTime } from '@shared/utils/time'
+
+interface ConversationCardProps {
+  conversation: Conversation
+  onOpen: (id: string) => void
+  onMenu?: (id: string) => void
+}
+
+export const ConversationCard: React.FC<ConversationCardProps> = ({
+  conversation,
+  onOpen,
+  onMenu
+}) => {
+  return (
+    <Box
+      border="1px solid"
+      borderColor="border.secondary"
+      borderRadius="md"
+      p={3}
+      _hover={{ bg: 'surface.hover' }}
+      cursor="pointer"
+      onClick={() => onOpen(conversation.id)}
+    >
+      <HStack justify="space-between" align="center">
+        <Text fontWeight="medium" noOfLines={1}>
+          {conversation.title}
+        </Text>
+        <HStack spacing={2}>
+          <Text fontSize="xs" color="text.tertiary">
+            {formatRelativeTime(conversation.updatedAt)}
+          </Text>
+          {onMenu && (
+            <IconButton
+              aria-label="Conversation options"
+              icon={<HamburgerIcon />}
+              size="xs"
+              variant="ghost"
+              onClick={(e) => {
+                e.stopPropagation()
+                onMenu(conversation.id)
+              }}
+            />
+          )}
+        </HStack>
+      </HStack>
+    </Box>
+  )
+}
+
+export default ConversationCard
diff --git a/src/renderer/components/features/projects/ProjectPage.tsx b/src/renderer/components/features/projects/ProjectPage.tsx
new file mode 100644
index 0000000..b8694c4
--- /dev/null
+++ b/src/renderer/components/features/projects/ProjectPage.tsx
@@ -0,0 +1,76 @@
+import React, { useMemo } from 'react'
+import { Box, Heading, VStack, Text } from '@chakra-ui/react'
+import { useConversations, useConversationStore } from '@renderer/stores/conversation'
+import { useProjectStore } from '@renderer/stores/project'
+import ConversationCard from './ConversationCard'
+import ConversationMenu from '@renderer/components/ui/ConversationMenu'
+import { useState } from 'react'
+import ChatInputBox from '@renderer/components/features/chat/ChatInputBox'
+
+interface Props {
+  projectId: string
+}
+
+const ProjectPage: React.FC<Props> = ({ projectId }) => {
+  const conversations = useConversations()
+  const setCurrentConversation = useConversationStore((s) => s.setCurrentConversation)
+  const project = useProjectStore((s) => s.projects.find((p) => p.id === projectId))
+
+  const projectConversations = useMemo(
+    () => conversations.filter((c) => c.projectId === projectId),
+    [conversations, projectId]
+  )
+
+  const [menuTargetId, setMenuTargetId] = useState<string | null>(null)
+
+  return (
+    <Box p={6}>
+      <Heading size="md" mb={4}>
+        {project?.name || 'Project'}
+      </Heading>
+
+      {/* Start a New Conversation */}
+      <Box mb={6}>
+        <Text fontWeight="semibold" mb={2}>
+          Start a New Conversation
+        </Text>
+        <ChatInputBox variant="project-entrance" projectId={projectId} />
+      </Box>
+
+      <Box>
+        <Text fontWeight="semibold" mb={3}>
+          Project Conversations ({projectConversations.length})
+        </Text>
+        <VStack align="stretch" spacing={3}>
+          {projectConversations.length === 0 ? (
+            <Text fontSize="sm" color="text.tertiary">
+              Start your first conversation
+            </Text>
+          ) : (
+            projectConversations.map((c) => (
+              <Box key={c.id} position="relative">
+                <ConversationCard
+                  conversation={c}
+                  onOpen={(id) => setCurrentConversation(id)}
+                  onMenu={(id) => setMenuTargetId(id)}
+                />
+                {menuTargetId === c.id && (
+                  <Box position="absolute" top={2} right={2}>
+                    <ConversationMenu
+                      conversationId={c.id}
+                      currentProjectId={projectId}
+                      onRename={() => setMenuTargetId(null)}
+                      onDelete={() => setMenuTargetId(null)}
+                    />
+                  </Box>
+                )}
+              </Box>
+            ))
+          )}
+        </VStack>
+      </Box>
+    </Box>
+  )
+}
+
+export default ProjectPage
diff --git a/src/renderer/components/layout/Sidebar.tsx b/src/renderer/components/layout/Sidebar.tsx
index 549f0d4..4ef424d 100644
--- a/src/renderer/components/layout/Sidebar.tsx
+++ b/src/renderer/components/layout/Sidebar.tsx
@@ -30,10 +30,16 @@ import {
   SettingsIcon,
   HamburgerIcon,
   CheckIcon,
-  CloseIcon
+  CloseIcon,
+  ChevronRightIcon,
+  ChevronDownIcon
 } from '@chakra-ui/icons'
+import ConversationMenu from '@renderer/components/ui/ConversationMenu'
+import DeleteProjectModal from '@renderer/components/ui/DeleteProjectModal'
 import { Button } from '@renderer/components/ui/Button'
 import { useConversationStore } from '@renderer/stores/conversation'
+import { useProjectStore } from '@renderer/stores/project'
+import { useNavigationActions } from '@renderer/stores/navigation'
 import { formatRelativeTime } from '@shared/utils/time'
 import { useNotifications } from '@renderer/components/ui'
 
@@ -80,6 +86,33 @@ export const Sidebar: React.FC<SidebarProps> = ({ className }) => {
   // Notifications
   const notifications = useNotifications()
 
+  // Projects state
+  const projects = useProjectStore((s) => s.projects)
+  const expanded = useProjectStore((s) => s.expanded)
+  const toggleProject = useProjectStore((s) => s.toggle)
+  const fetchProjects = useProjectStore((s) => s.fetchProjects)
+  const addProject = useProjectStore((s) => s.addProject)
+  const editProject = useProjectStore((s) => s.editProject)
+  const removeProject = useProjectStore((s) => s.removeProject)
+  const { navigateToProjectDetail, navigateToChat } = useNavigationActions()
+  const [isCreatingProject, setIsCreatingProject] = useState(false)
+  const [newProjectName, setNewProjectName] = useState('')
+  const [editingProjectId, setEditingProjectId] = useState<string | null>(null)
+  const [editingProjectName, setEditingProjectName] = useState('')
+  const {
+    isOpen: isDeleteProjectOpen,
+    onOpen: onOpenDeleteProject,
+    onClose: onCloseDeleteProject
+  } = useDisclosure()
+  const [projectPendingDeletion, setProjectPendingDeletion] = useState<{
+    id: string
+    name: string
+  } | null>(null)
+
+  useEffect(() => {
+    fetchProjects().catch(() => {})
+  }, [fetchProjects])
+
   // Ref for infinite scroll sentinel
   const sentinelRef = useRef<HTMLDivElement>(null)
 
@@ -227,7 +260,7 @@ export const Sidebar: React.FC<SidebarProps> = ({ className }) => {
 
   // Memoize conversation filtering to prevent re-renders
   // Show conversations that have at least 1 message (don't show empty conversations)
-  const allConversations = useMemo(
+  const filteredConversations = useMemo(
     () =>
       conversations
         .filter((conv) => {
@@ -239,6 +272,12 @@ export const Sidebar: React.FC<SidebarProps> = ({ className }) => {
     [conversations, messages]
   )
 
+  // Filter for uncategorized conversations (no projectId)
+  const uncategorizedConversations = useMemo(
+    () => filteredConversations.filter((conv) => !conv.projectId), // Only conversations without a project
+    [filteredConversations]
+  )
+
   return (
     <Box
       w="280px"
@@ -320,19 +359,239 @@ export const Sidebar: React.FC<SidebarProps> = ({ className }) => {
       {/* Main Content Area - Scrollable */}
       <Box flex={1} overflowY="auto" px={4} py={3}>
         <VStack spacing={6} align="stretch">
+          {/* Projects Section */}
+          <Box>
+            <HStack justify="space-between" mb={3}>
+              <Text fontSize="sm" fontWeight="semibold" color="text.secondary">
+                Projects
+              </Text>
+              <IconButton
+                aria-label="New project"
+                icon={<AddIcon />}
+                size="xs"
+                variant="ghost"
+                onClick={() => {
+                  setIsCreatingProject(true)
+                  setNewProjectName('')
+                }}
+              />
+            </HStack>
+
+            {isCreatingProject && (
+              <HStack mb={2}>
+                <Input
+                  placeholder="Project name"
+                  size="sm"
+                  value={newProjectName}
+                  onChange={(e) => setNewProjectName(e.target.value)}
+                  onKeyDown={async (e) => {
+                    if (e.key === 'Enter' && newProjectName.trim()) {
+                      const proj = await addProject(newProjectName.trim())
+                      setIsCreatingProject(false)
+                      setNewProjectName('')
+                      navigateToProjectDetail(proj.id)
+                    } else if (e.key === 'Escape') {
+                      setIsCreatingProject(false)
+                      setNewProjectName('')
+                    }
+                  }}
+                  autoFocus
+                />
+                <IconButton
+                  aria-label="Create project"
+                  icon={<CheckIcon />}
+                  size="xs"
+                  variant="ghost"
+                  isDisabled={!newProjectName.trim()}
+                  onClick={async () => {
+                    if (!newProjectName.trim()) return
+                    const proj = await addProject(newProjectName.trim())
+                    setIsCreatingProject(false)
+                    setNewProjectName('')
+                    navigateToProjectDetail(proj.id)
+                  }}
+                />
+                <IconButton
+                  aria-label="Cancel"
+                  icon={<CloseIcon />}
+                  size="xs"
+                  variant="ghost"
+                  onClick={() => {
+                    setIsCreatingProject(false)
+                    setNewProjectName('')
+                  }}
+                />
+              </HStack>
+            )}
+
+            <VStack spacing={0} align="stretch" role="list" aria-label="Projects">
+              {projects.map((p) => (
+                <Box key={p.id}>
+                  <HStack
+                    role="listitem"
+                    p={2}
+                    borderRadius="md"
+                    _hover={{ bg: 'surface.hover' }}
+                    justify="space-between"
+                  >
+                    <HStack spacing={2} flex={1}>
+                      <IconButton
+                        aria-label={expanded[p.id] ? 'Collapse' : 'Expand'}
+                        icon={expanded[p.id] ? <ChevronDownIcon /> : <ChevronRightIcon />}
+                        size="xs"
+                        variant="ghost"
+                        onClick={(e) => {
+                          e.stopPropagation()
+                          toggleProject(p.id)
+                        }}
+                      />
+                      {editingProjectId === p.id ? (
+                        <HStack flex={1} spacing={1}>
+                          <Input
+                            value={editingProjectName}
+                            onChange={(e) => setEditingProjectName(e.target.value)}
+                            fontSize="sm"
+                            variant="unstyled"
+                            size="sm"
+                            h="24px"
+                            onKeyDown={async (e) => {
+                              if (e.key === 'Enter' && editingProjectName.trim()) {
+                                await editProject(p.id, editingProjectName.trim())
+                                setEditingProjectId(null)
+                                setEditingProjectName('')
+                              } else if (e.key === 'Escape') {
+                                setEditingProjectId(null)
+                                setEditingProjectName('')
+                              }
+                            }}
+                            autoFocus
+                          />
+                          <IconButton
+                            aria-label="Confirm rename"
+                            icon={<CheckIcon />}
+                            size="xs"
+                            variant="ghost"
+                            onClick={async (e) => {
+                              e.stopPropagation()
+                              if (!editingProjectName.trim()) return
+                              await editProject(p.id, editingProjectName.trim())
+                              setEditingProjectId(null)
+                              setEditingProjectName('')
+                            }}
+                          />
+                          <IconButton
+                            aria-label="Cancel rename"
+                            icon={<CloseIcon />}
+                            size="xs"
+                            variant="ghost"
+                            onClick={(e) => {
+                              e.stopPropagation()
+                              setEditingProjectId(null)
+                              setEditingProjectName('')
+                            }}
+                          />
+                        </HStack>
+                      ) : (
+                        <Text
+                          fontSize="sm"
+                          fontWeight="medium"
+                          noOfLines={1}
+                          onClick={() => navigateToProjectDetail(p.id)}
+                        >
+                          {p.name}
+                        </Text>
+                      )}
+                    </HStack>
+
+                    {editingProjectId !== p.id && (
+                      <Menu>
+                        <MenuButton
+                          as={IconButton}
+                          aria-label="Project options"
+                          icon={<HamburgerIcon />}
+                          size="xs"
+                          variant="ghost"
+                          onClick={(e) => e.stopPropagation()}
+                        />
+                        <MenuList>
+                          <MenuItem
+                            onClick={(e) => {
+                              e.stopPropagation()
+                              setEditingProjectId(p.id)
+                              setEditingProjectName(p.name)
+                            }}
+                          >
+                            Rename
+                          </MenuItem>
+                          <MenuItem
+                            color="red.500"
+                            onClick={(e) => {
+                              e.stopPropagation()
+                              setProjectPendingDeletion({ id: p.id, name: p.name })
+                              onOpenDeleteProject()
+                            }}
+                          >
+                            Delete
+                          </MenuItem>
+                        </MenuList>
+                      </Menu>
+                    )}
+                  </HStack>
+
+                  {expanded[p.id] && (
+                    <VStack align="stretch" pl={8} spacing={0} mb={2}>
+                      {filteredConversations
+                        .filter((c) => c.projectId === p.id)
+                        .map((conversation) => (
+                          <HStack
+                            key={conversation.id}
+                            p={2}
+                            borderRadius="md"
+                            _hover={{ bg: 'surface.hover' }}
+                            justify="space-between"
+                            onClick={() => {
+                              setCurrentConversation(conversation.id)
+                              navigateToChat()
+                            }}
+                          >
+                            <Text fontSize="sm" noOfLines={1} flex={1}>
+                              {conversation.title}
+                            </Text>
+                            <ConversationMenu
+                              conversationId={conversation.id}
+                              currentProjectId={p.id}
+                              onRename={() =>
+                                handleStartInlineEdit(conversation.id, conversation.title)
+                              }
+                              onDelete={() => handleDeleteConversation(conversation.id)}
+                            />
+                          </HStack>
+                        ))}
+                    </VStack>
+                  )}
+                </Box>
+              ))}
+            </VStack>
+          </Box>
+
           {/* Conversations Section */}
           <Box>
             <Text fontSize="sm" fontWeight="semibold" color="text.secondary" mb={3}>
               Conversations
             </Text>
 
-            <VStack spacing={0} align="stretch" role="list" aria-label="All conversations">
-              {allConversations.length === 0 ? (
+            <VStack
+              spacing={0}
+              align="stretch"
+              role="list"
+              aria-label="Uncategorized conversations"
+            >
+              {uncategorizedConversations.length === 0 ? (
                 <Text fontSize="sm" color="text.tertiary" fontStyle="italic" py={2}>
-                  No conversations yet
+                  No uncategorized conversations
                 </Text>
               ) : (
-                allConversations.map((conversation) => {
+                uncategorizedConversations.map((conversation) => {
                   const isCurrentConversation = currentConversationId === conversation.id
                   const isConvHovered = hoveredConversation === conversation.id
 
@@ -352,7 +611,10 @@ export const Sidebar: React.FC<SidebarProps> = ({ className }) => {
                       }}
                       onMouseEnter={() => setHoveredConversation(conversation.id)}
                       onMouseLeave={() => setHoveredConversation(null)}
-                      onClick={() => setCurrentConversation(conversation.id)}
+                      onClick={() => {
+                        setCurrentConversation(conversation.id)
+                        navigateToChat()
+                      }}
                       justify="space-between"
                       align="center"
                     >
@@ -451,31 +713,14 @@ export const Sidebar: React.FC<SidebarProps> = ({ className }) => {
                             />
                           </HStack>
                         ) : isConvHovered ? (
-                          <Menu>
-                            <MenuButton
-                              as={IconButton}
-                              aria-label="Conversation options"
-                              icon={<HamburgerIcon />}
-                              size="xs"
-                              variant="ghost"
-                              onClick={(e) => e.stopPropagation()}
-                            />
-                            <MenuList>
-                              <MenuItem
-                                onClick={() =>
-                                  handleStartInlineEdit(conversation.id, conversation.title)
-                                }
-                              >
-                                Rename
-                              </MenuItem>
-                              <MenuItem
-                                color="red.500"
-                                onClick={() => handleDeleteConversation(conversation.id)}
-                              >
-                                Delete
-                              </MenuItem>
-                            </MenuList>
-                          </Menu>
+                          <ConversationMenu
+                            conversationId={conversation.id}
+                            currentProjectId={null}
+                            onRename={() =>
+                              handleStartInlineEdit(conversation.id, conversation.title)
+                            }
+                            onDelete={() => handleDeleteConversation(conversation.id)}
+                          />
                         ) : (
                           <Text fontSize="xs" color="text.tertiary" flexShrink={0}>
                             {formatRelativeTime(conversation.updatedAt)}
@@ -550,6 +795,34 @@ export const Sidebar: React.FC<SidebarProps> = ({ className }) => {
           </AlertDialogContent>
         </AlertDialogOverlay>
       </AlertDialog>
+      {/* Delete Project Modal (two-step) */}
+      <DeleteProjectModal
+        isOpen={isDeleteProjectOpen}
+        onClose={() => {
+          setProjectPendingDeletion(null)
+          onCloseDeleteProject()
+        }}
+        projectName={projectPendingDeletion?.name || ''}
+        conversationCount={
+          projectPendingDeletion
+            ? conversations.filter((c) => c.projectId === projectPendingDeletion.id).length
+            : 0
+        }
+        messageCount={
+          projectPendingDeletion
+            ? conversations
+                .filter((c) => c.projectId === projectPendingDeletion.id)
+                .map((c) => (messages[c.id] || []).length)
+                .reduce((a, b) => a + b, 0)
+            : 0
+        }
+        onConfirm={async () => {
+          if (!projectPendingDeletion) return
+          await removeProject(projectPendingDeletion.id)
+          setProjectPendingDeletion(null)
+          onCloseDeleteProject()
+        }}
+      />
     </Box>
   )
 }
diff --git a/src/renderer/components/ui/ConversationMenu.tsx b/src/renderer/components/ui/ConversationMenu.tsx
new file mode 100644
index 0000000..d2775be
--- /dev/null
+++ b/src/renderer/components/ui/ConversationMenu.tsx
@@ -0,0 +1,60 @@
+import React from 'react'
+import { Menu, MenuButton, MenuList, MenuItem, IconButton } from '@chakra-ui/react'
+import { HamburgerIcon, ChevronRightIcon } from '@chakra-ui/icons'
+import { useProjectStore } from '@renderer/stores/project'
+import { useConversationStore } from '@renderer/stores/conversation'
+
+interface Props {
+  conversationId: string
+  currentProjectId: string | null
+  onRename: () => void
+  onDelete: () => void
+}
+
+const ConversationMenu: React.FC<Props> = ({
+  conversationId,
+  currentProjectId,
+  onRename,
+  onDelete
+}) => {
+  const projects = useProjectStore((s) => s.projects)
+  const move = useConversationStore((s) => s.moveConversationToProject)
+
+  return (
+    <Menu>
+      <MenuButton
+        as={IconButton}
+        aria-label="Conversation options"
+        icon={<HamburgerIcon />}
+        size="xs"
+        variant="ghost"
+      />
+      <MenuList>
+        <Menu placement="right-start" autoSelect={false}>
+          <MenuButton as={MenuItem} icon={<ChevronRightIcon />}>
+            Move
+          </MenuButton>
+          <MenuList>
+            {currentProjectId && (
+              <MenuItem onClick={() => move(conversationId, null)}>Remove from project</MenuItem>
+            )}
+            {currentProjectId && <MenuItem isDisabled>──────────────</MenuItem>}
+            {projects
+              .filter((p) => p.id !== currentProjectId)
+              .map((p) => (
+                <MenuItem key={p.id} onClick={() => move(conversationId, p.id)}>
+                  {p.name}
+                </MenuItem>
+              ))}
+          </MenuList>
+        </Menu>
+        <MenuItem onClick={onRename}>Rename</MenuItem>
+        <MenuItem color="red.500" onClick={onDelete}>
+          Delete
+        </MenuItem>
+      </MenuList>
+    </Menu>
+  )
+}
+
+export default ConversationMenu
diff --git a/src/renderer/components/ui/DeleteProjectModal.tsx b/src/renderer/components/ui/DeleteProjectModal.tsx
new file mode 100644
index 0000000..72ae601
--- /dev/null
+++ b/src/renderer/components/ui/DeleteProjectModal.tsx
@@ -0,0 +1,93 @@
+import React, { useMemo, useState } from 'react'
+import { Box, Text, Button as ChakraButton, VStack, HStack, Badge } from '@chakra-ui/react'
+import Modal from './Modal'
+
+interface Props {
+  isOpen: boolean
+  onClose: () => void
+  projectName: string
+  conversationCount: number
+  messageCount: number
+  onConfirm: () => Promise<void>
+}
+
+const DeleteProjectModal: React.FC<Props> = ({
+  isOpen,
+  onClose,
+  projectName,
+  conversationCount,
+  messageCount,
+  onConfirm
+}) => {
+  const [step, setStep] = useState<1 | 2>(1)
+  const [input, setInput] = useState('')
+  const matches = useMemo(() => input === projectName, [input, projectName])
+
+  const footer = (
+    <HStack justify="space-between" w="full">
+      <ChakraButton onClick={() => (step === 1 ? onClose() : setStep(1))} variant="ghost">
+        {step === 1 ? 'Cancel' : 'Back'}
+      </ChakraButton>
+      {step === 1 ? (
+        <ChakraButton colorScheme="red" onClick={() => setStep(2)}>
+          Continue
+        </ChakraButton>
+      ) : (
+        <ChakraButton colorScheme="red" isDisabled={!matches} onClick={onConfirm}>
+          Delete Project
+        </ChakraButton>
+      )}
+    </HStack>
+  )
+
+  return (
+    <Modal
+      isOpen={isOpen}
+      onClose={() => {
+        setStep(1)
+        setInput('')
+        onClose()
+      }}
+      title={step === 1 ? 'Delete Project' : 'Confirm Deletion'}
+      footer={footer}
+    >
+      {step === 1 ? (
+        <VStack align="stretch" spacing={3}>
+          <Text>
+            You are about to permanently delete project “{projectName}”. This action will delete:
+          </Text>
+          <HStack>
+            <Badge colorScheme="red">{conversationCount}</Badge>
+            <Text>conversations</Text>
+          </HStack>
+          <HStack>
+            <Badge colorScheme="red">{messageCount}</Badge>
+            <Text>messages</Text>
+          </HStack>
+          <Text fontWeight="semibold" color="red.500">
+            This action cannot be undone.
+          </Text>
+        </VStack>
+      ) : (
+        <VStack align="stretch" spacing={3}>
+          <Text>Type the project name to confirm deletion:</Text>
+          <Box
+            as="input"
+            value={input}
+            onChange={(e: any) => setInput(e.target.value)}
+            placeholder={projectName}
+            border="1px solid"
+            borderColor={matches ? 'green.400' : 'red.400'}
+            borderRadius="md"
+            p={2}
+          />
+          <Text fontSize="sm" color={matches ? 'green.500' : 'red.500'}>
+            {matches ? '✓ Names match' : "Names don't match"}
+          </Text>
+        </VStack>
+      )}
+    </Modal>
+  )
+}
+
+export default DeleteProjectModal
diff --git a/src/renderer/pages/MainApp.tsx b/src/renderer/pages/MainApp.tsx
index 4d7f358..bbfe225 100644
--- a/src/renderer/pages/MainApp.tsx
+++ b/src/renderer/pages/MainApp.tsx
@@ -3,6 +3,8 @@ import { MainLayout } from '@renderer/components/layout/MainLayout'
 import MainPage from '@renderer/components/features/chat/MainPage'
 import ConversationPage from '@renderer/components/features/chat/ConversationPage'
 import { useCurrentConversation } from '@renderer/stores/conversation'
+import { useCurrentView } from '@renderer/stores/navigation'
+import ProjectPage from '@renderer/components/features/projects/ProjectPage'
 import { NotificationProvider } from '@renderer/components/ui'
 
 /**
@@ -15,6 +17,7 @@ import { NotificationProvider } from '@renderer/components/ui'
  */
 function MainApp(): JSX.Element {
   const { currentConversation, currentMessages } = useCurrentConversation()
+  const { currentView, selectedProjectId } = useCurrentView()
 
   return (
     <NotificationProvider>
@@ -23,7 +26,9 @@ function MainApp(): JSX.Element {
         <Box display="flex" flexDirection="column" h="100%">
           {/* Page Content - Direct routing without intermediate component */}
           <Box flex={1} bg="background.primary" minH={0}>
-            {!currentConversation || currentMessages.length === 0 ? (
+            {currentView === 'project-detail' && selectedProjectId ? (
+              <ProjectPage projectId={selectedProjectId} />
+            ) : !currentConversation || currentMessages.length === 0 ? (
               <MainPage />
             ) : (
               <ConversationPage />
diff --git a/src/renderer/stores/conversation.ts b/src/renderer/stores/conversation.ts
index ac5499b..5bbae7d 100644
--- a/src/renderer/stores/conversation.ts
+++ b/src/renderer/stores/conversation.ts
@@ -104,6 +104,7 @@ export interface ConversationState {
   deleteConversation: (conversationId: string) => Promise<void>
   updateConversationTitle: (conversationId: string, title: string) => Promise<void>
   generateConversationTitle: (conversationId: string) => Promise<void>
+  moveConversationToProject: (conversationId: string, projectId: string | null) => Promise<void>
 
   // Session settings
   updateSessionSettings: (
@@ -114,7 +115,7 @@ export interface ConversationState {
   // Message ops
   sendMessage: (
     content: MessageContent,
-    options?: { conversationId?: string; parentMessageId?: string }
+    options?: { conversationId?: string; parentMessageId?: string; projectId?: string }
   ) => Promise<void>
   regenerateMessage: (messageId: string) => Promise<void>
   editMessage: (messageId: string, content: MessageContent) => Promise<void>
@@ -498,6 +499,26 @@ export const useConversationStore = create<ConversationState>()(
       }
     },
 
+    moveConversationToProject: async (conversationId, projectId) => {
+      try {
+        const res = await window.knowlex.conversation.move(conversationId, projectId)
+        if (!res?.success) throw new Error(res?.error || 'Failed to move conversation')
+        set((s) => {
+          const c = s.conversations.find((x) => x.id === conversationId)
+          if (c) {
+            // ensure explicit null for uncategorized
+            ;(c as any).projectId = projectId ?? null
+            c.updatedAt = nowISO()
+          }
+        })
+      } catch (e) {
+        set((s) => {
+          s.error = e instanceof Error ? e.message : 'Failed to move conversation'
+        })
+        throw e
+      }
+    },
+
     // Session settings
     updateSessionSettings: async (conversationId, settings) => {
       try {
@@ -534,6 +555,7 @@ export const useConversationStore = create<ConversationState>()(
         const res = await window.knowlex.message.send({
           ...(options?.conversationId ? { conversationId: options.conversationId } : {}),
           ...(options?.parentMessageId ? { parentMessageId: options.parentMessageId } : {}),
+          ...(options?.projectId ? { projectId: options.projectId } : {}),
           content
         })
         set((s) => {
diff --git a/src/renderer/stores/index.ts b/src/renderer/stores/index.ts
index 2381ef6..2ef646d 100644
--- a/src/renderer/stores/index.ts
+++ b/src/renderer/stores/index.ts
@@ -7,6 +7,7 @@
 import useAppStoreInternal from './app'
 import useSettingsStoreInternal from './settings'
 import useConversationStoreInternal from './conversation'
+import useProjectStoreInternal from './project'
 
 // Store exports
 export {
@@ -84,6 +85,7 @@ export const initializeStores = async () => {
   // Initialize stores that need async setup
   const settingsStore = useSettingsStoreInternal.getState()
   const conversationStore = useConversationStoreInternal.getState()
+  const projectStore = useProjectStoreInternal.getState()
   const appStore = useAppStoreInternal.getState()
 
   try {
@@ -99,6 +101,7 @@ export const initializeStores = async () => {
     console.log('Initializing data stores...')
     // Initialize data stores
     await conversationStore.initialize()
+    await projectStore.fetchProjects()
 
     console.log('Marking app as initialized...')
     // Mark app as initialized
diff --git a/src/renderer/stores/project.ts b/src/renderer/stores/project.ts
new file mode 100644
index 0000000..2b1cef8
--- /dev/null
+++ b/src/renderer/stores/project.ts
@@ -0,0 +1,101 @@
+import { create } from 'zustand'
+import { persist, createJSONStorage } from 'zustand/middleware'
+import { immer } from 'zustand/middleware/immer'
+import type { Project } from '@shared/types/project'
+
+interface ProjectState {
+  projects: Project[]
+  expanded: Record<string, boolean>
+  isLoading: boolean
+  error: string | null
+
+  // Actions
+  fetchProjects: () => Promise<void>
+  addProject: (name: string) => Promise<Project>
+  editProject: (id: string, name: string) => Promise<void>
+  removeProject: (id: string) => Promise<void>
+
+  // UI expansion state
+  toggle: (id: string) => void
+  isExpanded: (id: string) => boolean
+}
+
+const initial: Pick<ProjectState, 'projects' | 'expanded' | 'isLoading' | 'error'> = {
+  projects: [],
+  expanded: {},
+  isLoading: false,
+  error: null
+}
+
+export const useProjectStore = create<ProjectState>()(
+  persist(
+    immer((set, get) => ({
+      ...initial,
+
+      fetchProjects: async () => {
+        set((s) => {
+          s.isLoading = true
+          s.error = null
+        })
+        try {
+          const res = await window.knowlex.project.list()
+          if (!res?.success) throw new Error(res?.error || 'Failed to load projects')
+          const items = (res.data as Project[]) || []
+          set((s) => {
+            s.projects = items
+            s.isLoading = false
+          })
+        } catch (e) {
+          set((s) => {
+            s.error = e instanceof Error ? e.message : 'Failed to load projects'
+            s.isLoading = false
+          })
+        }
+      },
+
+      addProject: async (name: string) => {
+        const res = await window.knowlex.project.create(name)
+        if (!res?.success || !res.data) throw new Error(res?.error || 'Failed to create project')
+        const proj = res.data as Project
+        set((s) => {
+          s.projects.unshift(proj)
+        })
+        return proj
+      },
+
+      editProject: async (id: string, name: string) => {
+        const res = await window.knowlex.project.update(id, { name })
+        if (!res?.success || !res.data) throw new Error(res?.error || 'Failed to update project')
+        const updated = res.data as Project
+        set((s) => {
+          const idx = s.projects.findIndex((p) => p.id === id)
+          if (idx >= 0) s.projects[idx] = updated
+        })
+      },
+
+      removeProject: async (id: string) => {
+        const res = await window.knowlex.project.delete(id)
+        if (!res?.success) throw new Error(res?.error || 'Failed to delete project')
+        set((s) => {
+          s.projects = s.projects.filter((p) => p.id !== id)
+          delete s.expanded[id]
+        })
+      },
+
+      toggle: (id: string) => {
+        set((s) => {
+          s.expanded[id] = !s.expanded[id]
+        })
+      },
+
+      isExpanded: (id: string) => !!get().expanded[id]
+    })),
+    {
+      name: 'knowlex-project-store',
+      storage: createJSONStorage(() => localStorage),
+      partialize: (s) => ({ expanded: s.expanded })
+    }
+  )
+)
+
+export default useProjectStore
diff --git a/src/shared/types/conversation.ts b/src/shared/types/conversation.ts
index 9cb30f5..b5d678f 100644
--- a/src/shared/types/conversation.ts
+++ b/src/shared/types/conversation.ts
@@ -3,6 +3,8 @@ export interface Conversation {
   title: string
   createdAt: string
   updatedAt: string
+  // Optional project association; null means uncategorized
+  projectId?: string | null
   settings?: SessionSettings
 }
 
diff --git a/src/shared/types/ipc.ts b/src/shared/types/ipc.ts
index 87c127c..e794d41 100644
--- a/src/shared/types/ipc.ts
+++ b/src/shared/types/ipc.ts
@@ -7,6 +7,7 @@ export interface IPCResult<T = unknown> {
 // Conversation IPC
 export interface ConversationCreateRequest {
   title?: string
+  projectId?: string | null
 }
 
 // File IPC (for temp files only)
diff --git a/src/shared/types/project.ts b/src/shared/types/project.ts
new file mode 100644
index 0000000..1503998
--- /dev/null
+++ b/src/shared/types/project.ts
@@ -0,0 +1,14 @@
+export interface Project {
+  id: string
+  name: string
+  createdAt: string
+  updatedAt: string
+}
+
+export interface CreateProjectData {
+  name: string
+}
+
+export interface UpdateProjectData {
+  name?: string
+}
